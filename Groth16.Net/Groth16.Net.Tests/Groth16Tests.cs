using System;
using System.ComponentModel;
using Newtonsoft.Json;

namespace Groth16.Net.Tests;

public class ProvingOutput
{
    public ProvingOutput(IList<string> publicInputs, string proof)
    {
        PublicInputs = publicInputs;
        Proof = proof;
    }

    [JsonProperty("public_inputs")] public IList<string> PublicInputs { get; set; }

    [JsonProperty("proof")] public string Proof { get; set; }

    public static ProvingOutput FromJsonString(string jsonString)
    {
        return JsonConvert.DeserializeObject<ProvingOutput>(jsonString);
    }
}

public class Groth16Tests
{
    private IDictionary<string, IList<string>> ProvingInput = new Dictionary<string, IList<string>>()
    {
        {
            "jwt", new List<string>
            {
                "101", "121", "74", "104", "98", "71", "99", "105", "79", "105", "74", "83", "85", "122", "73",
                "49", "78", "105", "73", "115", "73", "110", "82", "53", "99", "67", "73", "54", "73", "107", "112",
                "88",
                "86", "67", "74", "57", "46", "101", "121", "74", "122", "100", "87", "73", "105", "79", "105",
                "73",
                "120",
                "77", "106", "77", "48", "78", "84", "89", "51", "79", "68", "107", "119", "73", "105", "119",
                "105",
                "98",
                "109", "70", "116", "90", "83", "73", "54", "73", "107", "112", "118", "97", "71", "52", "103",
                "82",
                "71",
                "57", "108", "73", "105", "119", "105", "89", "87", "82", "116", "97", "87", "52", "105", "79",
                "110",
                "82",
                "121", "100", "87", "85", "115", "73", "109", "108", "104", "100", "67", "73", "54", "77", "84",
                "85",
                "120", "78", "106", "73", "122", "79", "84", "65", "121", "77", "110", "48", "0", "0", "0", "0",
                "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0"
            }
        },
        {
            "signature", new List<string>
            {
                "136066698678378650066472176144548241", "1800384327008418817146654168653894619",
                "2574524618487272827404567912127994032", "1572551955913018780280859127440201929",
                "1890564471282023685923539663639306374", "1866512077014082189748713566387377304",
                "2222710341065048773940709188556978891", "840541024972195344747634213092278743",
                "330476852732802730001627869075985501", "1294859790995514400195378924750900104",
                "1136356663482937321790125666232087630", "2501709109099362467808413692918409573",
                "1776875315524942066973947221991971257", "913872260108236275630951234884908773",
                "1608150223070592825745836511435000141", "1583177297555626922284372616305354634",
                "1063982966443379747600844439851650"
            }
        },
        {
            "pubkey", new List<string>
            {
                "5841544268561861499519250994748571",
                "282086110796185156675799806248152448", "2181169572700087019903500222780233598",
                "1322589976114836556068768894837633649", "1794113848426178665483863008905364300",
                "543380795324313410170505147425740531", "1493214249295981343844955353860051664",
                "2171199579242924905862250512208697455", "1395394319132308840130123038054629304",
                "1562009664380263536909338779810969578", "1594567849407226969396248621216777848",
                "2058356264851095114515728757906168363", "836769104848661443299826291369000556",
                "1779001964758400339025173335511101862", "2544058187525854999124570613534759403",
                "424565350689075956046563544271353450", "3799511822475913352444008446631779"
            }
        },
        {
            "salt", new List<string>
            {
                "97", "54", "55",
                "55", "57", "57", "57", "51", "57", "54", "100", "99", "52", "57", "97", "50", "56", "97", "100",
                "54",
                "99", "57", "99", "50", "52", "50", "55", "49", "57", "98", "98", "51"
            }
        }
    };

    string ExpectedInputString =
        "{\"jwt\":[\"101\",\"121\",\"74\",\"104\",\"98\",\"71\",\"99\",\"105\",\"79\",\"105\",\"74\",\"83\",\"85\",\"122\",\"73\",\"49\",\"78\",\"105\",\"73\",\"115\",\"73\",\"110\",\"82\",\"53\",\"99\",\"67\",\"73\",\"54\",\"73\",\"107\",\"112\",\"88\",\"86\",\"67\",\"74\",\"57\",\"46\",\"101\",\"121\",\"74\",\"122\",\"100\",\"87\",\"73\",\"105\",\"79\",\"105\",\"73\",\"120\",\"77\",\"106\",\"77\",\"48\",\"78\",\"84\",\"89\",\"51\",\"79\",\"68\",\"107\",\"119\",\"73\",\"105\",\"119\",\"105\",\"98\",\"109\",\"70\",\"116\",\"90\",\"83\",\"73\",\"54\",\"73\",\"107\",\"112\",\"118\",\"97\",\"71\",\"52\",\"103\",\"82\",\"71\",\"57\",\"108\",\"73\",\"105\",\"119\",\"105\",\"89\",\"87\",\"82\",\"116\",\"97\",\"87\",\"52\",\"105\",\"79\",\"110\",\"82\",\"121\",\"100\",\"87\",\"85\",\"115\",\"73\",\"109\",\"108\",\"104\",\"100\",\"67\",\"73\",\"54\",\"77\",\"84\",\"85\",\"120\",\"78\",\"106\",\"73\",\"122\",\"79\",\"84\",\"65\",\"121\",\"77\",\"110\",\"48\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],\"signature\":[\"136066698678378650066472176144548241\",\"1800384327008418817146654168653894619\",\"2574524618487272827404567912127994032\",\"1572551955913018780280859127440201929\",\"1890564471282023685923539663639306374\",\"1866512077014082189748713566387377304\",\"2222710341065048773940709188556978891\",\"840541024972195344747634213092278743\",\"330476852732802730001627869075985501\",\"1294859790995514400195378924750900104\",\"1136356663482937321790125666232087630\",\"2501709109099362467808413692918409573\",\"1776875315524942066973947221991971257\",\"913872260108236275630951234884908773\",\"1608150223070592825745836511435000141\",\"1583177297555626922284372616305354634\",\"1063982966443379747600844439851650\"],\"pubkey\":[\"5841544268561861499519250994748571\",\"282086110796185156675799806248152448\",\"2181169572700087019903500222780233598\",\"1322589976114836556068768894837633649\",\"1794113848426178665483863008905364300\",\"543380795324313410170505147425740531\",\"1493214249295981343844955353860051664\",\"2171199579242924905862250512208697455\",\"1395394319132308840130123038054629304\",\"1562009664380263536909338779810969578\",\"1594567849407226969396248621216777848\",\"2058356264851095114515728757906168363\",\"836769104848661443299826291369000556\",\"1779001964758400339025173335511101862\",\"2544058187525854999124570613534759403\",\"424565350689075956046563544271353450\",\"3799511822475913352444008446631779\"],\"salt\":[\"97\",\"54\",\"55\",\"55\",\"57\",\"57\",\"57\",\"51\",\"57\",\"54\",\"100\",\"99\",\"52\",\"57\",\"97\",\"50\",\"56\",\"97\",\"100\",\"54\",\"99\",\"57\",\"99\",\"50\",\"52\",\"50\",\"55\",\"49\",\"57\",\"98\",\"98\",\"51\"]}";


    [Fact]
    public void Test_InputSerialization()
    {
        var inputString = ProvingInput.ToJsonString();
        Assert.Equal(ExpectedInputString, inputString);
    }

    [Fact]
    public void Test_ProveAndVerify()
    {
        var wasmPath = "../../../../../data-files/guardianhash.wasm";
        var r1csPath = "../../../../../data-files/guardianhash.r1cs";
        var zkeyPath = "../../../../../data-files/guardianhash_0001.zkey";
        using var prover = Prover.Create(wasmPath, r1csPath, zkeyPath);

        var provingOutputString = prover.ProveBn254(ProvingInput);
        var provingOutput = ParseProvingOutput(provingOutputString);
        var verified = Verifier.VerifyBn254(prover.ExportVerifyingKeyBn254(), provingOutput.PublicInputs,
            provingOutput.Proof);
        Assert.True(verified);
    }

    [Theory]
    [InlineData("dc9b", 0, "dc9b")]
    [InlineData("dc9b", 1, "6e4d")]
    [InlineData("dc9b", 2, "3726")]
    [InlineData("dc9b", 3, "1b93")]
    [InlineData("dc9b", 4, "0dc9")]
    [InlineData("dc9b", 5, "06e4")]
    [InlineData("dc9b", 6, "0372")]
    [InlineData("dc9b", 7, "01b9")]
    [InlineData("dc9b", 8, "00dc")]
    [InlineData("dc9b", 9, "006e")]
    [InlineData("dc9b", 10, "0037")]
    [InlineData("dc9b", 11, "001b")]
    [InlineData("dc9b", 12, "000d")]
    [InlineData("dc9b", 13, "0006")]
    [InlineData("dc9b", 14, "0003")]
    [InlineData("dc9b", 15, "0001")]
    [InlineData("dc9b", 16, "0000")]
    [InlineData("dc9b", 17, "0000")]
    [InlineData("dc9b", 18, "0000")]
    public void Test_Shift(string hex, int shift, string result)
    {
        var bytes = Net.Helpers.HexStringToByteArray(hex);
        Net.Helpers.ShiftArrayRight(bytes, shift);
        var hexnew = BitConverter.ToString(bytes).Replace("-", "").ToLower();
        Assert.Equal(result, hexnew);
    }

    [Fact]
    public void Test_PubKey_Prep()
    {
        var hex =
            "bb5494d4b7d52cf1c2a333311f6328e2580e11e3f3366d2d46078b7b357a7df02dd20ba75532f0ee89cb467aead3f2335bbc9647b424ae604bee34ca127e6efaa2a16f029f06cb48b3e6cc636664a75f209d3c4a2f1a12dad15ccc690f2cf822cec92e7a63208519e259aa0b7327a191ddeaa86125bd6fd50cbe406964e0d272d5923468f73fb8d11433b95684f00900166c59ce8c37c7e54960a763ca4909d224fdc024b40d14d7bb6ebd576eb855fff78efade75988a46483094bf71340c315c5834c7f5c5c34d3951655122476070a5938e904fd9d3f0559e16582fbd68655df86ca7d68d022de95fe2b1231a85db00012002a786531adc2256e35df6dc9b";
        var chunks = Net.Helpers.HexToChunkedBytes(hex, 121, 17);
        Assert.Equal(new List<string>
        {
            "5841544268561861499519250994748571",
            "282086110796185156675799806248152448",
            "2181169572700087019903500222780233598",
            "1322589976114836556068768894837633649",
            "1794113848426178665483863008905364300",
            "543380795324313410170505147425740531",
            "1493214249295981343844955353860051664",
            "2171199579242924905862250512208697455",
            "1395394319132308840130123038054629304",
            "1562009664380263536909338779810969578",
            "1594567849407226969396248621216777848",
            "2058356264851095114515728757906168363",
            "836769104848661443299826291369000556",
            "1779001964758400339025173335511101862",
            "2544058187525854999124570613534759403",
            "424565350689075956046563544271353450",
            "3799511822475913352444008446631779"
        }, chunks);
    }

    private static ProvingOutput ParseProvingOutput(string provingOutput)
    {
        var provingOutputObj = JsonConvert.DeserializeObject<ProvingOutput>(provingOutput);
        return provingOutputObj;
    }
}